name    = Test-LWP-Recorder
author  = Edward Allen <ealleniii@cpan.org>
license = Perl_5
copyright_holder = Edward J. Allen III
copyright_year   = 2011

version = 0.01.00

[@Filter]
-bundle = @Basic
-remove = UploadToCPAN

[Git::NextVersion]
first_version = 0.01.00
version_regexp = ^v(.+)$

[AutoPrereqs]                   ; automatically find our prereqs
skip = ^MyApp

[Prepender]                     ; automatically add lines following the shebang in modules
copyright = 1
line = use strict; use warnings;
[Authority]                     ; put the $AUTHORITY line in modules and the metadata
authority = cpan:EALLENIII
[PkgVersion]                    ; put the "our $VERSION = ...;" line in modules
[PodWeaver]                     ; weave our POD and add useful boilerplate
[NextRelease]
time_zone = UTC
filename = Changes
format = %v%n%tReleased: %{yyyy-MM-dd HH:mm:ss VVVV}d


; Fun tests
[CompileTests]                  ; Create a t/00-compile.t file that auto-compiles every module in the dist
fake_home = 1                   ; fakes $ENV{HOME} just in case
[ExtraTests]
[CriticTests]
critic_config = t/perlcriticrc

[PodCoverageTests]
[PodSyntaxTests]
[Test::Pod::LinkCheck]
[PodSpellingTests]
stopwords = LICENCE             ; (sic) error in LICENSE 
stopwords = PASSed
stopwords = annonations

[ReportVersions::Tiny]          ; Report the versions of our prereqs


[ExecDir]                       ; automatically install files from bin/ directory as executables ( if it exists )
dir = bin
[ShareDir]                      ; automatically install File::ShareDir files from share/ ( if it exists )
dir = share
[MinimumPerl]                   ; automatically find the minimum perl version required and add it to prereqs
[Bugtracker]                    ; set bugtracker to http://rt.cpan.org/Public/Dist/Display.html?Name=$dist
[Homepage]                      ; set homepage to http://search.cpan.org/dist/$dist/
[MetaConfig]                    ; dump dzil config into metadata
[MetaData::BuiltWith]           ; dump entire perl modules we used to build into metadata
[Repository]                    ; set git repository path by looking at git configs
git_remote = origin
[MetaResources]                 ; add arbitrary resources to metadata
license = http://dev.perl.org/licenses/

;[GithubMeta]

[MetaNoIndex]                   ; tell PAUSE to not index those stuff ( if it exists )
directory = inc
directory = t
directory = xt
directory = examples
directory = share
directory = eg
[MetaProvides::Package]         ; get provides from package definitions in files
meta_noindex = 1
[ModuleBuild]                   ; create Build.PL file
[DualBuilders]                  ; have M::B and EU::MM but select only M::B as prereq
prefer = build
[MetaJSON]                      ; create META.json file
[ReadmeFromPod]                 ; create README file
[InstallGuide]                  ; create INSTALL file
;[Signature]                     ; create SIGNATURE file when we are releasing ( annoying to enter password during test builds... )
;sign = archive

[Git::Commit]                   ; commit the dzil-generated stuff
changelog = Changes
commit_msg = New CPAN release of %N - v%v%n%n%c
time_zone = UTC
add_files_in = releases         ; add our release tarballs to the repo
[Git::Tag]                      ; tag our new release
tag_format = v%v
tag_message = Tagged release v%v
[ChangelogFromGit]              ; generate CommitLog from git history
tag_regexp = ^v(.+)$
file_name = Changes
;[CheckChangesHasContent]        ; make sure you explained your changes :)
;changelog = Changes
[Git::Check]                    ; check working path for any uncommitted stuff ( exempt Changes because it will be committed after release )
changelog = Changes
[TestRelease]                   ; make sure that we won't release a FAIL distro :)
[ConfirmRelease]                ; double-check that we ACTUALLY want a release, ha!
[UploadToCPAN]

[ArchiveRelease]                ; archive our tarballs under releases/
directory = releases
[Git::Push]                     ; automatically push to the "origin" defined in .git/config
push_to = origin

